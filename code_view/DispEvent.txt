
CKdvDispEvent instruction:
1)DISPEVENT_PFUN 为 CKdvDispEvent 域内的void类型函数指针，参数为 CMessage
2)m_mappFun 的处理即为 注册(RegDispFunPointer)，是否注册(HasRegEvent)，清空(ClearDisp)，
3)DispEvent/OnTimeOut 由子类继承完成分发消息
4)m_hWnd 通知窗口句柄 由 SetNotifyWnd/GetNotifyWnd 设置
5)PostEvent: m_hWnd 已由子类设置完成时可进行消息发送
6)REG_PFUN 宏定义，简化注册处理，即 RegDispFunPointer
7)DISP_FUN(clsName, cMsg)  指定类名，由 clsName 类域内的事件id对应的处理函数处理 cMsg

#define TYPE_CMESSAGE  0         // 一般的CMessage消息
#define TYPE_TPMSG     1         // 收发的消息为CTPMSG ,需要进行消息类型的转换

// 各接口基类，主要用于分发消息
class CKdvDispEvent
{
public:
    typedef void(CKdvDispEvent::*DISPEVENT_PFUN)(const CMessage & cMsg);
	
public:
	// 判断一消息是否在本类中注册过
    BOOL HasRegEvent(u16 wEvent) const;
	
	// 分发消息，引起相对应的类的函数的调用，各子类完成自已的调用
    virtual void DispEvent(const CMessage &cMsg) = 0;
	// 消息超时的响应
    virtual void OnTimeOut(u16 wEvent) = 0;
	
	// 得到通知窗口句柄
    HWND GetNotifyWnd() { return m_hWnd; }
    // 设定通知窗口句柄
    void SetNotifyWnd(HWND hWnd) { m_hWnd = hWnd; }
	
protected:
    // 将一个消息和其处理函数注册进来
    void RegDispFunPointer(u16 wEvent, DISPEVENT_PFUN pFun);
    // 清空掉所有注册的信息
    void ClearDisp();
    // 向注册的界面窗口发送指定的消息
    BOOL PostEvent(u32 dwEvent, WPARAM wParam = 0, LPARAM lParam = 0);
	
protected:
    map<u16, DISPEVENT_PFUN> m_mappFun;    // 注册的< 事件id, 处理函数 > map
    HWND        m_hWnd;                    // 消息发送界面的窗口句柄
	...
}

//注册消息映射
#define REG_PFUN(event, fun)        \
	RegDispFunPointer(event, (void (CKdvDispEvent::*)(const CMessage &cMsg))&fun);

//分发消息映射
#define DISP_FUN(clsName, cMsg)                                 \
	if(m_mappFun.find(cMsg.event) != m_mappFun.end())			\
	{															\
	   (this->*(void(clsName::*)(const CMessage &cMsg))(m_mappFun[cMsg.event]))(cMsg);	\
	}
#endif



用法：

